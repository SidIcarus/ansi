#!/usr/bin/env bash

checkSourceHeader() {
    local s sources

    sources=$1

    if [[ -z "$sources" ]]; then
        error "Sources is empty."
        return 1
    fi

    while [[ -n "$sources" ]]; do
        s=${sources%% *}
        sources=${sources:${#s}}
        string::trim sources "$sources"

        if [[ ! "$s" =~ ^\[[-A-Z0-9]*\]$ ]]; then
            error "Invalid characters in source or bad format: $s"
            return 1
        fi

        s=${s:1:-1}

        if [[ ! -f "../sources/${s,,}.md" ]]; then
            error "Source file does not exist: ${s}"
            return 1
        fi
    done
}

setOptionalHeaders() {
    # Set all optional fields
    while [[ $# -gt 0 ]]; do
        if [[ -z "${content[$1]-}" ]]; then
            content[$1]=""
        fi

        shift
    done
}

checkHeaders() {
    local desiredHeaders file headers

    desiredHeaders=$1

    # Make sorted list of header names
    headers="$(printf "%s\n" "${!content[@]}" | sort | tr '\n' ',')"
    headers="${headers%%,}"

    # Ensure headers exactly match
    if [[ "$headers" != "$desiredHeaders" ]]; then
        error "Invalid set of headers: $headers"
        error "Expected: $desiredHeaders"

        return 1
    fi
}

testCategory() {
    local content evalMe

    if [[ "${1##*/}" =~ [^-a-z.0-9] ]]; then
        error "Invalid filename"
        return 1
    fi

    if [[ "$1" != *.md ]]; then
        error "Invalid extension"
        return 1
    fi

    if ! loadFile evalMe content "$1"; then
        error "Unable to load file"
        return 1
    fi

    if ! eval "$evalMe"; then
        error "Failure to eval the returned file data"
        return 1
    fi

    setOptionalHeaders "0"

    if ! checkHeaders "0,Name"; then
        return 1
    fi
}

testCode() {
    local content evalMe

    if [[ "${1##*/}" =~ [^-a-z.0-9] ]]; then
        error "Invalid filename"
        return 1
    fi

    if [[ "$1" != *.md ]]; then
        error "Invalid extension"
        return 1
    fi

    if ! loadFile evalMe content "$1"; then
        error "Unable to load file"
        return 1
    fi

    if ! eval "$evalMe"; then
        error "Failure to eval the returned file data"
        return 1
    fi

    if ! checkHeaders "7-Bit,8-Bit,Code,Description,Source"; then
        return 1
    fi

    if ! checkSourceHeader "${content[Source]}"; then
        return 1
    fi
}

testCsi() {
    local content evalMe

    if [[ "${1##*/}" =~ [^-a-z.0-9] ]]; then
        error "Invalid filename"
        return 1
    fi

    if [[ "$1" != *.md ]]; then
        error "Invalid extension"
        return 1
    fi


    if ! loadFile evalMe content "$1"; then
        error "Unable to load file"
        return 1
    fi

    if ! eval "$evalMe"; then
        error "Failure to eval the returned file data"
        return 1
    fi

    setOptionalHeaders "0"

    if ! checkHeaders "0,7-Bit Hex,8-Bit Hex,Category,Default,Description,Format,Source,Title"; then
        return 1
    fi

    if [[ ${content[Category]} =~ [^-A-Z0-9] ]]; then
        error "Invalid characters in category: ${content[Category]}"
        return 1
    fi

    if [[ ! -f "../categories/${content[Category],,}.md" ]]; then
        error "Category does not exist: ${content[Category]}"
        return 1
    fi

    if ! checkSourceHeader "${content[Source]}"; then
        return 1
    fi

    if [[ ! "${content[Format]}" =~ ^\`.*\`$ ]]; then
        error "Format is not markdown code: ${content[Format]}"
        return 1
    fi

    if [[ ! "${content['8-Bit Hex']}" =~ ^\`[0-9a-z\ \{\}.]*\`$ ]]; then
        error "8-Bit Hex is not lowercase hex in markdown: ${content['8-Bit Hex']}"
        return 1
    fi

    if [[ ! "${content['7-Bit Hex']}" =~ ^\`[0-9a-z\ \{\}.]*\`$ ]]; then
        error "7-Bit Hex is not lowercase hex in markdown: ${content['7-Bit Hex']}"
        return 1
    fi

    if [[ ! "${content['Title']}" =~ ^\([A-Z]*\)(\ [A-Z][a-z]*)*$ ]]; then
        error "Poorly formatted title: ${content[Title]}"
        return 1
    fi
}

testSource() {
    local content evalMe

    if [[ "${1##*/}" =~ [^-a-z.0-9] ]]; then
        error "Invalid filename"
        return 1
    fi

    if [[ "$1" != *.md ]]; then
        error "Invalid extension"
        return 1
    fi

    if ! loadFile evalMe content "$1"; then
        error "Unable to load file" >&2
        return 1
    fi

    if ! eval "$evalMe"; then
        error "Failure to eval the returned file data"
        return 1
    fi

    if ! checkHeaders "Name,Short,Url"; then
        return 1
    fi

    if [[ "${content[Short]}" =~ [^-A-Z0-9] ]]; then
        error "Invalid characters in short code: ${content[Short]}"
        return 1
    fi
}

cd "${0%/*}" || {
    echo "Can't change directory."
    exit 1
}

# shellcheck disable=SC1091
. ./lib/load-file

# shellcheck disable=SC1091
. ./lib/status

checked=0
failures=0

for file in ../categories/*; do
    status "$file"

    if ! testCategory "$file"; then
        error "Problem with file: $file"
        failures=$((failures + 1))
    fi

    checked=$((checked + 1))
    statusClear
done

for file in ../codes/*; do
    status "$file"

    if ! testCode "$file"; then
        error "Problem with file: $file"
        failures=$((failures + 1))
    fi

    checked=$((checked + 1))
    statusClear
done

for file in ../sources/*; do
    status "$file"

    if ! testSource "$file"; then
        error "Problem with file: $file"
        failures=$((failures + 1))
    fi

    checked=$((checked + 1))
    statusClear
done

for file in ../csi/*; do
    status "$file"

    if ! testCsi "$file"; then
        error "Problem with file: $file"
        failures=$((failures + 1))
    fi

    checked=$((checked + 1))
    statusClear
done

echo "$checked checked, $failures failures"

if [[ "$failures" -eq 0 ]]; then
    echo "All passed"
else
    echo "Failures found"
    exit 1
fi
